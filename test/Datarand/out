rm: cannot remove '*.png': No such file or directory
rm: cannot remove '*.dot': No such file or directory
+ LLVMROOT=/mnt/Projects/LLVM-custom/install/bin
+ /mnt/Projects/LLVM-custom/install/bin/clang -O1 -mllvm -debug-pass=Arguments -c -emit-llvm testmem2reg.c -S -o testmem2reg.ll
testmem2reg.c:22:30: warning: implicitly declaring library function 'malloc' with type 'void *(unsigned long)' [-Wimplicit-function-declaration]
    struct Dummy* dummyptr = malloc(sizeof(struct Dummy));
                             ^
testmem2reg.c:22:30: note: include the header <stdlib.h> or explicitly provide a declaration for 'malloc'
Pass Arguments:  -tti -targetlibinfo -tbaa -scoped-noalias -assumption-cache-tracker -verify -ee-instrument -simplifycfg -domtree -sroa -early-cse -lower-expect
Dumping function:

; Function Attrs: nounwind uwtable
define dso_local i32 @fn1() #0 {
entry:
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %0 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #3
  %1 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #3
  %call = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %a)
  %call1 = call i32 (i8*, ...) @__isoc99_scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32* %b)
  %c.0..sroa_cast = bitcast i32* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %c.0..sroa_cast)
  %2 = load i32, i32* %a, align 4, !tbaa !2
  %3 = load i32, i32* %b, align 4, !tbaa !2
  %add = add nsw i32 %2, %3
  store i32 %add, i32* %c, align 4, !tbaa !2
  %d.0..sroa_cast = bitcast i32* %d to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %d.0..sroa_cast)
  %4 = load i32, i32* %b, align 4, !tbaa !2
  %5 = load i32, i32* %a, align 4, !tbaa !2
  %sub = sub nsw i32 %4, %5
  store i32 %sub, i32* %d, align 4, !tbaa !2
  %c.0.load = load i32, i32* %c, align 4
  %d.0.load = load i32, i32* %d, align 4
  %mul = mul nsw i32 %c.0.load, %d.0.load
  %d.0..sroa_cast2 = bitcast i32* %d to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %d.0..sroa_cast2)
  %c.0..sroa_cast3 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %c.0..sroa_cast3)
  %6 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %6) #3
  %7 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %7) #3
  ret i32 %mul
}

Dumping function:

; Function Attrs: nounwind uwtable
define dso_local %struct.Dummy* @getDummy() #0 {
entry:
  %dummyptr = alloca %struct.Dummy*, align 8
  %dummyptr.0..sroa_cast = bitcast %struct.Dummy** %dummyptr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %dummyptr.0..sroa_cast)
  %call = call i8* @malloc(i64 16)
  %0 = bitcast i8* %call to %struct.Dummy*
  store %struct.Dummy* %0, %struct.Dummy** %dummyptr, align 8, !tbaa !6
  %dummyptr.0. = load %struct.Dummy*, %struct.Dummy** %dummyptr, align 8, !tbaa !6
  %fptr2 = getelementptr inbounds %struct.Dummy, %struct.Dummy* %dummyptr.0., i32 0, i32 1
  store i32 (...)* bitcast (i32 ()* @fn1 to i32 (...)*), i32 (...)** %fptr2, align 8, !tbaa !8
  %dummyptr.0.1 = load %struct.Dummy*, %struct.Dummy** %dummyptr, align 8, !tbaa !6
  %dummyptr.0..sroa_cast2 = bitcast %struct.Dummy** %dummyptr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %dummyptr.0..sroa_cast2)
  ret %struct.Dummy* %dummyptr.0.1
}

Dumping function:

; Function Attrs: nounwind uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %dptr = alloca %struct.Dummy*, align 8
  %k = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %dptr.0..sroa_cast = bitcast %struct.Dummy** %dptr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %dptr.0..sroa_cast)
  %call = call %struct.Dummy* @getDummy()
  store %struct.Dummy* %call, %struct.Dummy** %dptr, align 8, !tbaa !9
  %k.0..sroa_cast = bitcast i32* %k to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %k.0..sroa_cast)
  %dptr.0. = load %struct.Dummy*, %struct.Dummy** %dptr, align 8, !tbaa !9
  %fptr2 = getelementptr inbounds %struct.Dummy, %struct.Dummy* %dptr.0., i32 0, i32 1
  %0 = load i32 (...)*, i32 (...)** %fptr2, align 8, !tbaa !6
  %call1 = call i32 (...) %0()
  store i32 %call1, i32* %k, align 4, !tbaa !2
  %k.0.load = load i32, i32* %k, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i32 %k.0.load)
  %k.0..sroa_cast3 = bitcast i32* %k to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %k.0..sroa_cast3)
  %dptr.0..sroa_cast4 = bitcast %struct.Dummy** %dptr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %dptr.0..sroa_cast4)
  ret i32 0
}

Pass Arguments:  -tti -targetlibinfo -tbaa -scoped-noalias -assumption-cache-tracker -profile-summary-info -forceattrs -inferattrs -ipsccp -called-value-propagation -globalopt -domtree -mem2reg -deadargelim -domtree -basicaa -aa -loops -lazy-branch-prob -lazy-block-freq -opt-remark-emitter -instcombine -simplifycfg -basiccg -globals-aa -prune-eh -always-inline -functionattrs -domtree -sroa -basicaa -aa -memoryssa -early-cse-memssa -domtree -basicaa -aa -lazy-value-info -jump-threading -correlated-propagation -simplifycfg -domtree -basicaa -aa -loops -lazy-branch-prob -lazy-block-freq -opt-remark-emitter -instcombine -libcalls-shrinkwrap -loops -branch-prob -block-freq -lazy-branch-prob -lazy-block-freq -opt-remark-emitter -pgo-memop-opt -domtree -basicaa -aa -loops -lazy-branch-prob -lazy-block-freq -opt-remark-emitter -tailcallelim -simplifycfg -reassociate -domtree -loops -loop-simplify -lcssa-verification -lcssa -basicaa -aa -scalar-evolution -loop-rotate -licm -loop-unswitch -simplifycfg -domtree -basicaa -aa -loops -lazy-branch-prob -lazy-block-freq -opt-remark-emitter -instcombine -loop-simplify -lcssa-verification -lcssa -scalar-evolution -indvars -loop-idiom -loop-deletion -memdep -memcpyopt -sccp -domtree -demanded-bits -bdce -basicaa -aa -loops -lazy-branch-prob -lazy-block-freq -opt-remark-emitter -instcombine -lazy-value-info -jump-threading -correlated-propagation -domtree -basicaa -aa -memdep -dse -loops -loop-simplify -lcssa-verification -lcssa -aa -scalar-evolution -licm -postdomtree -adce -simplifycfg -domtree -basicaa -aa -loops -lazy-branch-prob -lazy-block-freq -opt-remark-emitter -instcombine -barrier -basiccg -rpo-functionattrs -globalopt -globaldce -basiccg -globals-aa -float2int -domtree -loops -loop-simplify -lcssa-verification -lcssa -basicaa -aa -scalar-evolution -loop-rotate -loop-accesses -lazy-branch-prob -lazy-block-freq -opt-remark-emitter -loop-distribute -branch-prob -block-freq -scalar-evolution -basicaa -aa -loop-accesses -demanded-bits -lazy-branch-prob -lazy-block-freq -opt-remark-emitter -loop-vectorize -loop-simplify -scalar-evolution -aa -loop-accesses -loop-load-elim -basicaa -aa -lazy-branch-prob -lazy-block-freq -opt-remark-emitter -instcombine -simplifycfg -domtree -basicaa -aa -loops -lazy-branch-prob -lazy-block-freq -opt-remark-emitter -instcombine -scalar-evolution -alignment-from-assumptions -strip-dead-prototypes -domtree -loops -branch-prob -block-freq -loop-simplify -lcssa-verification -lcssa -basicaa -aa -scalar-evolution -branch-prob -block-freq -loop-sink -lazy-branch-prob -lazy-block-freq -opt-remark-emitter -instsimplify -div-rem-pairs -simplifycfg
Pass Arguments:  -targetlibinfo -domtree -loops -branch-prob -block-freq
Pass Arguments:  -targetlibinfo -domtree -loops -branch-prob -block-freq
Pass Arguments:  -tti
1 warning generated.
+ '[' 0 -ne 0 ']'
+ /mnt/Projects/LLVM-custom/install/bin/opt -mem2reg testmem2reg.ll -o testmem2reg_opt.bc
+ /mnt/Projects/LLVM-custom/install/bin/llvm-dis testmem2reg_opt.bc -o testmem2reg_opt.ll
+ '[' 0 -ne 0 ']'
