void encrypt_globals(char* ptr, long numBytes) {
	for (int i = 0; i < numBytes; i++) {
		char c = *(ptr+i) ^ 0xAA;
		*(ptr+i) = c;
	}
}

void encryptStringAfterLibCall(char *ptr) {
	if (ptr == 0x0) return;
	int i = 0;
	while (1) {
		*ptr ^= 0xAA;
		ptr++;
		// The next character is the NULL character
		if (*ptr == '\0') break;
	}
	// Encrypt the last NULL character
	*ptr ^= 0xAA;
}

void decryptStringBeforeLibCall(char *ptr) {
	if (ptr == 0x0) return;
	int i = 0;
	while (1) {
		*ptr ^= 0xAA;
		// Did we see the NULL character already?
		if (*ptr == '\0') break;
		ptr++;
	}
}

void decryptArrayForLibCall(char* ptr, int numBytes) {
	if (ptr == 0x0) return;
	for (int i = 0; i < numBytes; i++) {
		*(ptr++) ^= 0xAA;
	}
}

void encryptArrayForLibCall(char* ptr, int numBytes) {
	if (ptr == 0x0) return;
	for (int i = 0; i < numBytes; i++) {
		*(ptr++) ^= 0xAA;
	}
}

void instrumentArrayForLibCall(char* ptr, int numBytes) {
	if (ptr == 0x0) return;
	for (int i = 0; i < numBytes; i++) {
		*(ptr++) ^= 0xAA;
	}
}

