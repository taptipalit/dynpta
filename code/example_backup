; ModuleID = 'example_inst.bc'
source_filename = "example.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [10 x i8] c"sensitive\00", section "llvm.metadata", align 16
@.str.1 = private unnamed_addr constant [10 x i8] c"example.c\00", section "llvm.metadata", align 16
@.str.2 = private unnamed_addr constant [28 x i8] c"Value of *p and c is:%d, %d\00", align 16
@__dfsan_arg_tls = external thread_local(initialexec) global [64 x i16]
@__dfsan_retval_tls = external thread_local(initialexec) global i16
@__dfsan_shadow_ptr_mask = external global i64

; Function Attrs: nounwind uwtable
define dso_local i32 @main() #0 !dbg !7 {
entry:
  %retval = alloca i32, align 4
  %padding = alloca i128, !PADDING !11
  %a = alloca i32, align 16, !SENSITIVE !12
  call void @populate_keys()
  call void @zeroize()
  %0 = bitcast i32* %a to i8*
  call void @dfsan_set_label(i16 zeroext 1, i8* %0, i64 1)
  %b = alloca i32, align 4
  %p = alloca i32*, align 8
  store i32 0, i32* %retval, align 4
  call void @llvm.dbg.declare(metadata i32* %a, metadata !13, metadata !DIExpression()), !dbg !14
  %a1 = bitcast i32* %a to i8*, !dbg !15
  %1 = getelementptr [10 x i8], [10 x i8]* @.str, i32 0, i32 0
  %2 = getelementptr [10 x i8], [10 x i8]* @.str.1, i32 0, i32 0
  call void @llvm.var.annotation(i8* %a1, i8* %1, i8* %2, i32 5), !dbg !15
  call void @llvm.dbg.declare(metadata i32* %b, metadata !16, metadata !DIExpression()), !dbg !17
  call void @llvm.dbg.declare(metadata i32** %p, metadata !18, metadata !DIExpression()), !dbg !20
  %3 = bitcast i32* %a to i8*, !dbg !21
  %4 = call zeroext i16 @dfsan_read_label(i8* %3, i64 1), !dbg !21
  %cmp = icmp eq i16 %4, 1, !dbg !21
  br i1 %cmp, label %5, label %7, !dbg !21

; <label>:5:                                      ; preds = %entry
  %6 = call i8* @setEncryptedValueDWord(i8* %3, i32 10), !dbg !21
  br label %8, !dbg !21

; <label>:7:                                      ; preds = %entry
  store i32 10, i32* %a, !dbg !21
  br label %8, !dbg !21

; <label>:8:                                      ; preds = %7, %5
  store i32 19, i32* %b, align 4, !dbg !22
  store i32* %a, i32** %p, align 8, !dbg !23
  store i32* %b, i32** %p, align 8, !dbg !24
  %9 = bitcast i32* %a to i8*, !dbg !25
  %10 = call zeroext i16 @dfsan_read_label(i8* %9, i64 1), !dbg !25
  %cmp1 = icmp eq i16 %10, 1, !dbg !25
  br i1 %cmp1, label %11, label %13, !dbg !25

; <label>:11:                                     ; preds = %8
  %12 = call i32 @getDecryptedValueDWord(i8* %9), !dbg !25
  br label %15, !dbg !25

; <label>:13:                                     ; preds = %8
  %14 = load i32, i32* %a, !dbg !25
  br label %15, !dbg !25

; <label>:15:                                     ; preds = %13, %11
  %16 = phi i32 [ %12, %11 ], [ %14, %13 ], !dbg !25
  %add = add nsw i32 %16, 1, !dbg !26
  %17 = bitcast i32* %a to i8*, !dbg !27
  %18 = call zeroext i16 @dfsan_read_label(i8* %17, i64 1), !dbg !27
  %cmp2 = icmp eq i16 %18, 1, !dbg !27
  br i1 %cmp2, label %19, label %21, !dbg !27

; <label>:19:                                     ; preds = %15
  %20 = call i8* @setEncryptedValueDWord(i8* %17, i32 %add), !dbg !27
  br label %22, !dbg !27

; <label>:21:                                     ; preds = %15
  store i32 %add, i32* %a, !dbg !27
  br label %22, !dbg !27

; <label>:22:                                     ; preds = %21, %19
  %23 = load i32*, i32** %p, align 8, !dbg !28
  %24 = bitcast i32* %23 to i8*, !dbg !29
  %25 = call zeroext i16 @dfsan_read_label(i8* %24, i64 1), !dbg !29
  %cmp3 = icmp eq i16 %25, 1, !dbg !29
  br i1 %cmp3, label %26, label %28, !dbg !29

; <label>:26:                                     ; preds = %22
  %27 = call i32 @getDecryptedValueDWord(i8* %24), !dbg !29
  br label %30, !dbg !29

; <label>:28:                                     ; preds = %22
  %29 = load i32, i32* %23, !dbg !29
  br label %30, !dbg !29

; <label>:30:                                     ; preds = %28, %26
  %31 = phi i32 [ %27, %26 ], [ %29, %28 ], !dbg !29
  %add2 = add nsw i32 %31, 6, !dbg !30
  %32 = bitcast i32* %a to i8*, !dbg !31
  %33 = call zeroext i16 @dfsan_read_label(i8* %32, i64 1), !dbg !31
  %cmp4 = icmp eq i16 %33, 1, !dbg !31
  br i1 %cmp4, label %34, label %36, !dbg !31

; <label>:34:                                     ; preds = %30
  %35 = call i8* @setEncryptedValueDWord(i8* %32, i32 %add2), !dbg !31
  br label %37, !dbg !31

; <label>:36:                                     ; preds = %30
  store i32 %add2, i32* %a, !dbg !31
  br label %37, !dbg !31

; <label>:37:                                     ; preds = %36, %34
  %38 = bitcast i32* %a to i8*, !dbg !32
  %39 = call zeroext i16 @dfsan_read_label(i8* %38, i64 1), !dbg !32
  %cmp5 = icmp eq i16 %39, 1, !dbg !32
  br i1 %cmp5, label %40, label %42, !dbg !32

; <label>:40:                                     ; preds = %37
  %41 = call i32 @getDecryptedValueDWord(i8* %38), !dbg !32
  br label %44, !dbg !32

; <label>:42:                                     ; preds = %37
  %43 = load i32, i32* %a, !dbg !32
  br label %44, !dbg !32

; <label>:44:                                     ; preds = %42, %40
  %45 = phi i32 [ %41, %40 ], [ %43, %42 ], !dbg !32
  %46 = load i32*, i32** %p, align 8, !dbg !33
  %47 = bitcast i32* %46 to i8*, !dbg !34
  %48 = call zeroext i16 @dfsan_read_label(i8* %47, i64 1), !dbg !34
  %cmp6 = icmp eq i16 %48, 1, !dbg !34
  br i1 %cmp6, label %49, label %51, !dbg !34

; <label>:49:                                     ; preds = %44
  %50 = call i32 @getDecryptedValueDWord(i8* %47), !dbg !34
  br label %53, !dbg !34

; <label>:51:                                     ; preds = %44
  %52 = load i32, i32* %46, !dbg !34
  br label %53, !dbg !34

; <label>:53:                                     ; preds = %51, %49
  %54 = phi i32 [ %50, %49 ], [ %52, %51 ], !dbg !34
  %55 = getelementptr [28 x i8], [28 x i8]* @.str.2, i32 0, i32 0
  %call = call i32 (i8*, ...) @printf(i8* %55, i32 %45, i32 %54), !dbg !35
  call void @writeback_cache(), !dbg !36
  ret i32 0, !dbg !36
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare void @llvm.var.annotation(i8*, i8*, i8*, i32) #2

declare dso_local i32 @printf(i8*, ...) #3

declare void @writeback_cache()

declare i64 @decrypt_cache(i8*)

declare i64 @encrypt_cache(i8*)

declare i64 @decrypt_memory(i8*)

declare i64 @encrypt_memory(i8*)

declare i8 @getDecryptedValueByte(i8*)

declare i16 @getDecryptedValueWord(i8*)

declare i32 @getDecryptedValueDWord(i8*)

declare i64 @getDecryptedValueQWord(i8*)

declare i8* @getSafeMalloc(i64)

declare i32 @checkBounds(i8*)

declare void @initializeCustomMalloc()

declare void @dfsan_set_label(i16 zeroext, i8*, i64)

declare zeroext i16 @dfsan_read_label(i8*, i64)

declare i8* @setEncryptedValueByte(i8*, i8)

declare i8* @setEncryptedValueWord(i8*, i16)

declare i8* @setEncryptedValueDWord(i8*, i32)

declare i8* @setEncryptedValueQWord(i8*, i64)

declare i8* @aes_malloc(i64)

declare i8* @aes_calloc(i64, i64)

declare i8* @memcpy_sens_src(i8*, i8*, i32)

declare i8* @memcpy_sens_dst(i8*, i8*, i32)

declare i64 @encrypt_globals(i8*, i64)

declare void @populate_keys()

declare void @zeroize()

declare void @decryptArrayForLibCall(i8*, i64)

declare void @encryptArrayForLibCall(i8*, i64)

declare void @decryptStringBeforeLibCall(i8*)

declare void @encryptStringAfterLibCall(i8*)

declare void @decryptStringBeforeLibCall.1(i8*)

declare void @instrumentArrayForLibCall(i8*, i64)

declare void @decryptStringPtrBeforeLibCall(i8**)

declare void @encryptStringPtrAfterLibCall(i8**)

declare void @encryptArrayPtrAfterLibCall(i8**, i64)

; Function Attrs: nounwind readnone
declare zeroext i16 @__dfsan_union(i16 zeroext, i16 zeroext) #4

; Function Attrs: nounwind readnone
declare zeroext i16 @dfsan_union(i16 zeroext, i16 zeroext) #4

; Function Attrs: nounwind readonly
declare zeroext i16 @__dfsan_union_load(i16*, i64) #5

declare void @__dfsan_unimplemented(i8*)

declare void @__dfsan_set_label(i16 zeroext, i8*, i64)

declare void @__dfsan_nonzero_label()

declare void @__dfsan_vararg_wrapper(i8*)

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 7.0.0 (trunk)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "example.c", directory: "/home/jfmoon/LLVM-custom/code")
!2 = !{}
!3 = !{i32 2, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"clang version 7.0.0 (trunk)"}
!7 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 4, type: !8, isLocal: false, isDefinition: true, scopeLine: 4, flags: DIFlagPrototyped, isOptimized: false, unit: !0, retainedNodes: !2)
!8 = !DISubroutineType(types: !9)
!9 = !{!10}
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = !{!"padding"}
!12 = !{!"sensitive"}
!13 = !DILocalVariable(name: "a", scope: !7, file: !1, line: 5, type: !10)
!14 = !DILocation(line: 5, column: 19, scope: !7)
!15 = !DILocation(line: 5, column: 5, scope: !7)
!16 = !DILocalVariable(name: "b", scope: !7, file: !1, line: 6, type: !10)
!17 = !DILocation(line: 6, column: 9, scope: !7)
!18 = !DILocalVariable(name: "p", scope: !7, file: !1, line: 7, type: !19)
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!20 = !DILocation(line: 7, column: 10, scope: !7)
!21 = !DILocation(line: 8, column: 7, scope: !7)
!22 = !DILocation(line: 9, column: 7, scope: !7)
!23 = !DILocation(line: 10, column: 7, scope: !7)
!24 = !DILocation(line: 11, column: 7, scope: !7)
!25 = !DILocation(line: 12, column: 9, scope: !7)
!26 = !DILocation(line: 12, column: 11, scope: !7)
!27 = !DILocation(line: 12, column: 7, scope: !7)
!28 = !DILocation(line: 13, column: 10, scope: !7)
!29 = !DILocation(line: 13, column: 9, scope: !7)
!30 = !DILocation(line: 13, column: 12, scope: !7)
!31 = !DILocation(line: 13, column: 7, scope: !7)
!32 = !DILocation(line: 17, column: 43, scope: !7)
!33 = !DILocation(line: 17, column: 46, scope: !7)
!34 = !DILocation(line: 17, column: 45, scope: !7)
!35 = !DILocation(line: 17, column: 5, scope: !7)
!36 = !DILocation(line: 18, column: 5, scope: !7)
